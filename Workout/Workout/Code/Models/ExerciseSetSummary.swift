//
//  ExerciseSetSummary.swift
//  Future
//

import Foundation

/// This is the summary of an individual set generated by the user as they workout.
public struct ExerciseSetSummary: Codable, Equatable {
    public var id: String?
    public var exerciseSetID: String
    public var workoutSummaryID: String?
    public var startedAt: Date?
    public var completedAt: Date?
    public var timeSpentActive: Int?
    public var weight: Float?
    public var repsReported: Int?
    public var exerciseSet: ExerciseSet?

    public enum CodingKeys: String, CodingKey {
        case id = "id"
        case exerciseSetID = "set_id"
        case workoutSummaryID = "summary_id"
        case startedAt = "started_at"
        case completedAt = "completed_at"
        case timeSpentActive = "time_spent_active"
        case weight = "weight"
        case repsReported = "reps_reported"
        case exerciseSet = "set"
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        self.exerciseSetID = try container.decode(String.self, forKey: .exerciseSetID)
        self.id = try container.decodeIfPresent(String.self, forKey: .id)
        self.workoutSummaryID = try container.decodeIfPresent(String.self, forKey: .workoutSummaryID)
        self.startedAt = try container.decodeIfPresent(String.self, forKey: .startedAt)?.asDate()
        self.completedAt = try container.decodeIfPresent(String.self, forKey: .completedAt)?.asDate()
        self.timeSpentActive = try container.decodeIfPresent(Int.self, forKey: .timeSpentActive)
        self.weight = try container.decodeIfPresent(Float.self, forKey: .weight)
        self.repsReported = try container.decodeIfPresent(Int.self, forKey: .repsReported)
        self.exerciseSet = try container.decodeIfPresent(ExerciseSet.self, forKey: .exerciseSet)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(self.exerciseSetID, forKey: .exerciseSetID)
        try container.encodeIfPresent(self.id, forKey: .id)
        try container.encodeIfPresent(self.workoutSummaryID, forKey: .workoutSummaryID)
        try container.encodeIfPresent(self.startedAt?.asString(), forKey: .startedAt)
        try container.encodeIfPresent(self.completedAt?.asString(), forKey: .completedAt)
        try container.encodeIfPresent(self.timeSpentActive, forKey: .timeSpentActive)
        try container.encodeIfPresent(self.weight, forKey: .weight)
        try container.encodeIfPresent(self.repsReported, forKey: .repsReported)
        try container.encodeIfPresent(self.exerciseSet, forKey: .exerciseSet)
    }
}

extension ExerciseSetSummary {

    public var weightUsed: Float? {
        return weight ?? exerciseSet?.weight
    }

    public var repsCompleted: Int? {
        return repsReported ?? exerciseSet?.reps
    }

}

// Helper to create an ExerciseSetSummary from JSON data for preview.
extension ExerciseSetSummary {
    // swiftlint:disable function_parameter_count
    static func sample(
        id: String?,
        exerciseSetID: String,
        workoutSummaryID: String?,
        startedAt: Date?,
        completedAt: Date?,
        timeSpentActive: Int?,
        weight: Float?,
        repsReported: Int?,
        exerciseSet: ExerciseSet?
        // swiftlint:enable function_parameter_count
    ) -> ExerciseSetSummary {
        var json = """
        {
            "set_id": "\(exerciseSetID)"
        """
        if let id = id { json += ", \"id\": \"\(id)\"" }
        if let workoutSummaryID = workoutSummaryID { json += ", \"summary_id\": \"\(workoutSummaryID)\"" }
        if let startedAt = startedAt { json += ", \"started_at\": \"\(startedAt.asString())\"" }
        if let completedAt = completedAt { json += ", \"completed_at\": \"\(completedAt.asString())\"" }
        if let timeSpentActive = timeSpentActive { json += ", \"time_spent_active\": \(timeSpentActive)" }
        if let weight = weight { json += ", \"weight\": \(weight)" }
        if let repsReported = repsReported { json += ", \"reps_reported\": \(repsReported)" }
        if let exerciseSet = exerciseSet {
            json += ", \"set\": {\"id\": \"\(exerciseSet.id)\", "
            json += "\"exercise\": {\"id\": \"\(exerciseSet.exercise!.id)\", "
            json += "\"name\": \"\(exerciseSet.exercise!.name ?? "")\"}}"
        }
        json += "}"

        guard let data = json.data(using: .utf8),
              let summary = try? JSONDecoder().decode(ExerciseSetSummary.self, from: data) else {
            fatalError("Failed to create ExerciseSetSummary sample")
        }
        return summary
    }

}
